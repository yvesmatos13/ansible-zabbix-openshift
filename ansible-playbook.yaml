---
- name: Deploy Zabbix + MySQL on OpenShift
  hosts: localhost
  gather_facts: no
  vars:
    namespace: zabbix
    mysql_user: zabbix
    mysql_password: zabbixpass
    mysql_database: zabbixdb

  tasks:

    - name: Create Namespace
      kubernetes.core.k8s:
        state: present
        kind: Namespace
        name: "{{ namespace }}"

    - name: Create PersistentVolumeClaim for MySQL
      kubernetes.core.k8s:
        definition:
          apiVersion: v1
          kind: PersistentVolumeClaim
          metadata:
            name: mysql-pvc
            namespace: "{{ namespace }}"
          spec:
            accessModes:
              - ReadWriteOnce
            resources:
              requests:
                storage: 5Gi

    - name: Create MySQL Deployment
      kubernetes.core.k8s:
        definition:
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: mysql
            namespace: "{{ namespace }}"
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: mysql
            template:
              metadata:
                labels:
                  app: mysql
              spec:
                containers:
                  - name: mysql
                    image: mysql:8.0
                    env:
                      - name: MYSQL_ROOT_PASSWORD
                        value: "{{ mysql_password }}"
                      - name: MYSQL_DATABASE
                        value: "{{ mysql_database }}"
                      - name: MYSQL_USER
                        value: "{{ mysql_user }}"
                      - name: MYSQL_PASSWORD
                        value: "{{ mysql_password }}"
                    ports:
                      - containerPort: 3306
                    volumeMounts:
                      - name: mysql-storage
                        mountPath: /var/lib/mysql
                volumes:
                  - name: mysql-storage
                    persistentVolumeClaim:
                      claimName: mysql-pvc

    - name: Create Zabbix Server Deployment
      kubernetes.core.k8s:
        definition:
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: zabbix-server
            namespace: "{{ namespace }}"
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: zabbix-server
            template:
              metadata:
                labels:
                  app: zabbix-server
              spec:
                containers:
                  - name: zabbix-server
                    image: zabbix/zabbix-server-mysql:alpine-6.0-latest
                    env:
                      - name: DB_SERVER_HOST
                        value: mysql
                      - name: MYSQL_DATABASE
                        value: "{{ mysql_database }}"
                      - name: MYSQL_USER
                        value: "{{ mysql_user }}"
                      - name: MYSQL_PASSWORD
                        value: "{{ mysql_password }}"
                    ports:
                      - containerPort: 10051

    - name: Wait for Zabbix Server pod to be ready
      shell: |
        until oc get pod -n {{ namespace }} -l app=zabbix-server -o jsonpath="{.items[0].status.phase}" | grep -q Running; do
          echo "Waiting for pod..."
          sleep 5
        done
      delegate_to: localhost

    - name: Copy create.sql.gz to /tmp inside Zabbix Server pod
      shell: |
        oc exec -n {{ namespace }} $(oc get pod -n {{ namespace }} -l app=zabbix-server -o jsonpath="{.items[0].metadata.name}") -- \
        cp /usr/share/doc/zabbix-server-mysql/create.sql.gz /tmp/create.sql.gz
      delegate_to: localhost

    - name: Decompress create.sql.gz inside Zabbix Server pod
      shell: |
        oc exec -n {{ namespace }} $(oc get pod -n {{ namespace }} -l app=zabbix-server -o jsonpath="{.items[0].metadata.name}") -- \
        gunzip -f /tmp/create.sql.gz
      delegate_to: localhost

    - name: Copiar create.sql do pod para a m√°quina local
      shell: |
        oc cp {{ namespace }}/$(oc get pod -n {{ namespace }} -l app=zabbix-server -o jsonpath="{.items[0].metadata.name}"):\
        /tmp/create.sql ./create.sql
      delegate_to: localhost

    - name: Aguardar 5 segundo
      pause:
        seconds: 5

    - name: Drop zabbixdb from Zabbix Server pod
      shell: |
        oc exec -n {{ namespace }} $(oc get pod -n {{ namespace }} -l app=mysql -o jsonpath="{.items[0].metadata.name}") -- \
        mysql -u root -p{{ mysql_password }} -e "
        DROP DATABASE {{ mysql_database }};"
      delegate_to: localhost

    - name: Aguardar 5 segundo
      pause:
        seconds: 5

    - name: Create zabbixdb from Zabbix Server pod
      shell: |
        oc exec -n {{ namespace }} $(oc get pod -n {{ namespace }} -l app=mysql -o jsonpath="{.items[0].metadata.name}") -- \
        mysql -u root -p{{ mysql_password }} -e "
        CREATE DATABASE {{ mysql_database }} CHARACTER SET utf8mb4 COLLATE utf8mb4_bin;"
      delegate_to: localhost

    - name: Aguardar 5 segundo
      pause:
        seconds: 5

    - name: Copiar create.sql para o pod MySQL
      shell: |
        oc cp ./create.sql {{ namespace }}/$(oc get pod -n {{ namespace }} -l app=mysql -o jsonpath="{.items[0].metadata.name}"):\
        /tmp/create.sql
      delegate_to: localhost

    - name: Aguardar 5 segundo
      pause:
        seconds: 5

    - name: Importar schema para o MySQL via stdin
      shell: |
        cat ./create.sql | oc exec -i -n {{ namespace }} $(oc get pod -n {{ namespace }} -l app=mysql -o jsonpath="{.items[0].metadata.name}") -- \
        mysql -uroot -p{{ mysql_password }} {{ mysql_database }}
      delegate_to: localhost

    - name: Aguardar 15 segundo
      pause:
        seconds: 15

    - name: Expose MySQL Service
      kubernetes.core.k8s:
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            name: mysql
            namespace: "{{ namespace }}"
          spec:
            selector:
              app: mysql
            ports:
              - protocol: TCP
                port: 3306
                targetPort: 3306
            type: ClusterIP

    - name: Expose Zabbix Server Service
      kubernetes.core.k8s:
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            name: zabbix-server
            namespace: "{{ namespace }}"
          spec:
            selector:
              app: zabbix-server
            ports:
              - protocol: TCP
                port: 10051
                targetPort: 10051
            type: ClusterIP

    - name: Create Zabbix Web Interface
      kubernetes.core.k8s:
        definition:
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: zabbix-web
            namespace: "{{ namespace }}"
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: zabbix-web
            template:
              metadata:
                labels:
                  app: zabbix-web
              spec:
                containers:
                  - name: zabbix-web
                    image: zabbix/zabbix-web-nginx-mysql:alpine-6.0-latest
                    env:
                      - name: DB_SERVER_HOST
                        value: mysql
                      - name: MYSQL_DATABASE
                        value: "{{ mysql_database }}"
                      - name: MYSQL_USER
                        value: "{{ mysql_user }}"
                      - name: MYSQL_PASSWORD
                        value: "{{ mysql_password }}"
                      - name: ZBX_SERVER_HOST
                        value: zabbix-server
                    ports:
                      - containerPort: 8080

    - name: Expose Zabbix Web Interface
      kubernetes.core.k8s:
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            name: zabbix-web-service
            namespace: "{{ namespace }}"
          spec:
            selector:
              app: zabbix-web
            ports:
              - protocol: TCP
                port: 80
                targetPort: 8080
            type: ClusterIP

    - name: Expose Route for Zabbix Web Interface
      kubernetes.core.k8s:
        definition:
          apiVersion: route.openshift.io/v1
          kind: Route
          metadata:
            name: zabbix-web-route
            namespace: "{{ namespace }}"
          spec:
            to:
              kind: Service
              name: zabbix-web-service
            port:
              targetPort: 8080
            tls:
              termination: edge

